@page "/categories"
@inherits OwningComponentBase<ApplicationDbContext>

<h3>Categories</h3>

@if (_items == null)
{
    <p>Loading ...</p>
}
else
{
    <div class="table-responsive tableFixHead">
        <table class="table table-sm table-bordered table-hover ">
            @*<table class="table table-sm table-bordered table-striped table-hover ">*@
            <caption>List of Categories</caption>
            <thead>
                <tr>
                    <th scope="col">
                        <button class="btn btn-outline-success" @onclick="add">+ add</button>
                    </th>
                    <th scope="col">Id</th>
                    <th scope="col">Name</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @{
                    int rowNbr = 1;
                }
                @foreach (var item in _items)
                {
                    <tr>
                        <td>@(rowNbr++)</td>
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>
                            <button class="btn btn-outline-primary" @onclick="(()=>edit(item))">edit</button>
                            <button class="btn btn-outline-danger" @onclick="(async ()=>await delete(item))">delete</button>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
}

@if (_show)
{
    <div class="modal" tabindex="-1" style="display:block;">

        <EditForm Model="_model" OnValidSubmit="@(async () => await validsubmit())">

            <div class="modal-dialog modal-dialog-scrollable modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title text-info">@(_model.Id == 0 ? "Add" : "Edit") Category</h5>
                        <button type="button" class="close" @onclick="close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="col-12">

                                <div class="row py-2">
                                    <div class="col-4">
                                        Category Name
                                    </div>
                                    <div class="col-8">
                                        <div class="form-group">
                                            <InputText class="form-control" @bind-Value="@_model.Name" />
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-success" data-dismiss="modal">
                            <span aria-hidden="true">save</span>
                        </button>
                        <button type="button" class="btn btn-light" @onclick="close">
                            <span aria-hidden="true">close</span>
                        </button>
                    </div>
                </div>
            </div>

        </EditForm>
    </div>
}

@code {
    private ApplicationDbContext _db => Service;
    [Inject] private IJSRuntime _js { get; set; }
    List<Category> _items;
    Category _model;
    private bool _show;

    protected override async Task OnInitializedAsync()
    {
        //seed
        if (!await _db.Categories.AnyAsync())
        {
            for (int i = 1; i <= 10; i++)
            {
                _db.Categories.Add(new Category { Name = "Category " + i });
            }
            await _db.SaveChangesAsync();
        }

        _items = await _db.Categories.ToListAsync();
    }

    private async Task validsubmit()
    {
        _show = false;

        if (_model.Id == 0)
        {
            await _db.Categories.AddAsync(_model);
        }
        else
        {
            _db.Categories.Update(_model);
        }

        var result = await _db.SaveChangesAsync();
        if (result == 0)
        {
            //error
            await _js.InvokeVoidAsync("alert", "Error saving data");
        }
        else
        {
            //saved
            await _js.InvokeVoidAsync("alert", "Data saved");

            _items = await _db.Categories.ToListAsync();
        }
    }

    private void add()
    {
        _model = new Category();
        _show = true;
    }

    private void edit(Category model)
    {
        _model = model;
        _show = true;
    }

    private async Task delete(Category model)
    {
        if (await _js.InvokeAsync<bool>("confirm", "Are absolutely you sure you want to delete this item?"))
        {
            _db.Categories.Remove(model);
            var result = await _db.SaveChangesAsync();
            if (result == 0)
            {
                //error
                await _js.InvokeVoidAsync("alert", "Error deleting data");
            }
            else
            {
                //saved
                await _js.InvokeVoidAsync("alert", "Data saved");

                _items = await _db.Categories.ToListAsync();
            }
        }

    }

    private void close()
    {
        _show = false;
    }
}
