@page "/TreeDemo"
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment HostEnvironment
@inherits OwningComponentBase<ApplicationDbContext>

<div class="row">
    <div class="col-xl-6" style="margin-bottom: 16px">
        <div class="row">
            <div class="col-md-4" style="margin-bottom: 16px">
                <h3>Inline definition</h3>
                <RadzenTree Expand="@LogExpand" Change="@LogChange" Style="width: 100%; height: 300px">
                    <RadzenTreeItem Text="BMW">
                        <RadzenTreeItem Text="M3" />
                        <RadzenTreeItem Text="M5" />
                    </RadzenTreeItem>
                    <RadzenTreeItem Text="Audi">
                        <RadzenTreeItem Text="RS4" />
                        <RadzenTreeItem Text="RS6" />
                    </RadzenTreeItem>
                    <RadzenTreeItem Text="Mercedes">
                        <RadzenTreeItem Text="C63 AMG" />
                        <RadzenTreeItem Text="S63 AMG" />
                    </RadzenTreeItem>
                </RadzenTree>
            </div>
            <div class="col-md-6" style="margin-bottom: 16px">
                <h3>Files and directories</h3>
                <RadzenTree Change="@LogChange" Data="@entries" Expand="@LoadFiles" Style="width: 100%; height: 300px">
                    <RadzenTreeLevel Text="@GetTextForNode" Template="@FileOrFolderTemplate" />
                </RadzenTree>
            </div>
        </div>
    </div>
    <div class="col-xl-6" style="margin-bottom: 16px">
        <h3>Events</h3>
        <RadzenCard style="overflow: auto;height:500px;">
            @foreach (var e in events.OrderByDescending(i => i.Key))
            {
                @e.Value
                <br />
            }
        </RadzenCard>
    </div>
</div>

@code {
    ApplicationDbContext _db => Service;

    IEnumerable<string> entries = null;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    void Log(string eventName, string value)
    {
        events.Add(DateTime.Now, $"{eventName}: {value}");
    }
    void LogChange(TreeEventArgs args)
    {
        Log("Change", $"Item Text: {args.Text}");
    }

    void LogExpand(TreeExpandEventArgs args)
    {
        if (args.Value is string text)
        {
            Log("Expand", $"Text: {text}");
        }
    }

    protected override void OnInitialized()
    {
        entries = Directory.GetDirectories(HostEnvironment.ContentRootPath)
                           .Where(entry =>
                           {
                               var name = Path.GetFileName(entry);

                               return !name.StartsWith(".") && name != "bin" && name != "obj";
                           });
    }

    string GetTextForNode(object data)
    {
        return Path.GetFileName((string)data);
    }

    RenderFragment<RadzenTreeItem> FileOrFolderTemplate = (context) => builder =>
    {
        string path = context.Value as string;
        bool isDirectory = Directory.Exists(path);

        builder.OpenComponent<RadzenIcon>(0);
        builder.AddAttribute(1, "Icon", isDirectory ? "folder" : "insert_drive_file");
        if (!isDirectory)
        {
            builder.AddAttribute(2, "Style", "margin-left: 24px");
        }
        builder.CloseComponent();
        builder.AddContent(3, context.Text);
    };

    void LoadFiles(TreeExpandEventArgs args)
    {
        var directory = args.Value as string;

        args.Children.Data = Directory.EnumerateFileSystemEntries(directory);
        args.Children.Text = GetTextForNode;
        args.Children.HasChildren = (path) => Directory.Exists((string)path);
        args.Children.Template = FileOrFolderTemplate;

        Log("Expand", $"Text: {args.Text}");
    }
}